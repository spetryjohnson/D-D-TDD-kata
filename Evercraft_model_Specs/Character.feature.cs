// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.239
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Evercraft_model_Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Character")]
    public partial class CharacterFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Character.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Character", "In order to play the game\r\nAs a player\r\nI want to be able to create a new charact" +
                    "er", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Characters have names")]
        public virtual void CharactersHaveNames()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Characters have names", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("I have created a new character");
#line 8
 testRunner.When("I name it \"Funny Ass Name\"");
#line 9
 testRunner.Then("the character name should be \"Funny Ass Name\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Characters have alignments")]
        public virtual void CharactersHaveAlignments()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Characters have alignments", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
 testRunner.Given("I have created a new character");
#line 15
 testRunner.When("I give it an alignment of \"Evil\"");
#line 16
 testRunner.Then("the Character alignment should be \"Evil\"");
#line 18
 testRunner.When("I give it an alignment of \"Good\"");
#line 19
 testRunner.Then("the Character alignment should be \"Good\"");
#line 21
 testRunner.When("I give it an alignment of \"Neutral\"");
#line 22
 testRunner.Then("the Character alignment should be \"Neutral\"");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Characters have Hit Points")]
        public virtual void CharactersHaveHitPoints()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Characters have Hit Points", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("I have created a new character");
#line 27
 testRunner.Then("the Base Hit Points should be 5");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Characters have an Armor Class")]
        public virtual void CharactersHaveAnArmorClass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Characters have an Armor Class", ((string[])(null)));
#line 30
this.ScenarioSetup(scenarioInfo);
#line 31
 testRunner.Given("I have created a new character");
#line 32
 testRunner.Then("the Armor Class should be 10");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Characters attributes have default values")]
        public virtual void CharactersAttributesHaveDefaultValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Characters attributes have default values", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
 testRunner.Given("I have created a new character");
#line 37
 testRunner.Then("the Strength attribute should be 10");
#line 38
 testRunner.And("the Dexterity attribute should be 10");
#line 39
 testRunner.And("the Constitution attribute should be 10");
#line 40
 testRunner.And("the Wisdom attribute should be 10");
#line 41
 testRunner.And("the Intelligence attribute should be 10");
#line 42
 testRunner.And("the Charisma attribute should be 10");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Character attributes can be modified from their default")]
        public virtual void CharacterAttributesCanBeModifiedFromTheirDefault()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Character attributes can be modified from their default", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line 46
 testRunner.Given("I have created a new character");
#line 47
 testRunner.When("I give it a Strength attribute of 9");
#line 48
 testRunner.And("I give it a Wisdom attribute of 11");
#line 49
 testRunner.Then("the Strength attribute should be 9");
#line 50
 testRunner.And("the Wisdom attribute should be 11");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Character attributes must be between 1 and 20, inclusive")]
        public virtual void CharacterAttributesMustBeBetween1And20Inclusive()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Character attributes must be between 1 and 20, inclusive", ((string[])(null)));
#line 53
this.ScenarioSetup(scenarioInfo);
#line 54
 testRunner.Given("I have created a new character");
#line 55
 testRunner.Then("the system should not let me enter an attribute less than 1");
#line 56
 testRunner.And("the system should not let me enter an attribute greater than 20");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Character attributes have modifiers based upon their values")]
        public virtual void CharacterAttributesHaveModifiersBasedUponTheirValues()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Character attributes have modifiers based upon their values", ((string[])(null)));
#line 59
this.ScenarioSetup(scenarioInfo);
#line 60
 testRunner.Given("I have created a new character");
#line 61
 testRunner.Then("an attribute value of 1 should have a modifier of -5");
#line 62
 testRunner.And("an attribute value of 2 should have a modifier of -4");
#line 63
 testRunner.And("an attribute value of 3 should have a modifier of -4");
#line 64
 testRunner.And("an attribute value of 4 should have a modifier of -3");
#line 65
 testRunner.And("an attribute value of 5 should have a modifier of -3");
#line 66
 testRunner.And("an attribute value of 6 should have a modifier of -2");
#line 67
 testRunner.And("an attribute value of 7 should have a modifier of -2");
#line 68
 testRunner.And("an attribute value of 8 should have a modifier of -1");
#line 69
 testRunner.And("an attribute value of 9 should have a modifier of -1");
#line 70
 testRunner.And("an attribute value of 10 should have a modifier of 0");
#line 71
 testRunner.And("an attribute value of 11 should have a modifier of 0");
#line 72
 testRunner.And("an attribute value of 12 should have a modifier of 1");
#line 73
 testRunner.And("an attribute value of 13 should have a modifier of 1");
#line 74
 testRunner.And("an attribute value of 14 should have a modifier of 2");
#line 75
 testRunner.And("an attribute value of 15 should have a modifier of 2");
#line 76
 testRunner.And("an attribute value of 16 should have a modifier of 3");
#line 77
 testRunner.And("an attribute value of 17 should have a modifier of 3");
#line 78
 testRunner.And("an attribute value of 18 should have a modifier of 4");
#line 79
 testRunner.And("an attribute value of 19 should have a modifier of 4");
#line 80
 testRunner.And("an attribute value of 20 should have a modifier of 5");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Effective Armor Class is calculated by adding the Dexterity modifier to the b" +
            "ase armor class")]
        public virtual void TheEffectiveArmorClassIsCalculatedByAddingTheDexterityModifierToTheBaseArmorClass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Effective Armor Class is calculated by adding the Dexterity modifier to the b" +
                    "ase armor class", ((string[])(null)));
#line 83
this.ScenarioSetup(scenarioInfo);
#line 84
 testRunner.Given("I have created a new character");
#line 85
 testRunner.Then("the Effective Armor Class equals the base Armor Class plus the Dexterity modifier" +
                    "");
#line 87
 testRunner.Given("I have created a new character");
#line 88
 testRunner.And("the Base Armor Class is 5");
#line 89
 testRunner.And("the Dexterity modifier is 5");
#line 90
 testRunner.Then("the Effective Armor Class should be 10");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The Effective Hit Points are calculated by adding the Constitution modifier to hi" +
            "t points")]
        public virtual void TheEffectiveHitPointsAreCalculatedByAddingTheConstitutionModifierToHitPoints()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The Effective Hit Points are calculated by adding the Constitution modifier to hi" +
                    "t points", ((string[])(null)));
#line 93
this.ScenarioSetup(scenarioInfo);
#line 97
 testRunner.Given("I have created a new character");
#line 98
 testRunner.Then("the Effective Hit Points equal the base Hit Points plus the Constitution modifier" +
                    "");
#line 100
 testRunner.Given("I have created a new character");
#line 101
 testRunner.And("the Base Hit Points are 5");
#line 102
 testRunner.And("the Constitution modifier is -5");
#line 103
 testRunner.Then("the Effective Hit Points should be 1");
#line 105
 testRunner.Given("I have created a new character");
#line 106
 testRunner.And("the Base Hit Points are 5");
#line 107
 testRunner.And("the Constitution modifier is -5");
#line 108
 testRunner.And("the character has taken 1 points of damage");
#line 109
 testRunner.Then("the Effective Hit Points should be 0");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
