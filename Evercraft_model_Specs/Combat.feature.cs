// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.239
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Evercraft_model_Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Combat")]
    public partial class CombatFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Combat.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Combat", "In order to play Evercraft\r\nAs a character\r\nI want to be able to kick someone\'s a" +
                    "ss", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Attacks succeed when the attack roll is greater than or equal to the opponents Ar" +
            "mor Class")]
        public virtual void AttacksSucceedWhenTheAttackRollIsGreaterThanOrEqualToTheOpponentsArmorClass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attacks succeed when the attack roll is greater than or equal to the opponents Ar" +
                    "mor Class", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("two Characters are ready for combat");
#line 9
 testRunner.When("the attacker rolls a 13 against an Armor Class of 12");
#line 10
 testRunner.Then("the attack succeeds");
#line 12
 testRunner.When("the attacker rolls a 12 against an Armor Class of 12");
#line 13
 testRunner.Then("the attack succeeds");
#line 15
 testRunner.When("the attacker rolls a 11 against an Armor Class of 12");
#line 16
 testRunner.Then("the attack fails");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("The attacker\'s Strength modifier is added to the attack roll when calculating a s" +
            "uccessful hit")]
        public virtual void TheAttackerSStrengthModifierIsAddedToTheAttackRollWhenCalculatingASuccessfulHit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("The attacker\'s Strength modifier is added to the attack roll when calculating a s" +
                    "uccessful hit", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
 testRunner.Given("two Characters are ready for combat");
#line 21
 testRunner.And("the attacker\'s Strength modifier is 2");
#line 22
 testRunner.When("the attacker rolls a 12 against an Armor Class of 14");
#line 23
 testRunner.Then("the attack succeeds");
#line 25
 testRunner.Given("two Characters are ready for combat");
#line 26
 testRunner.And("the attacker\'s Strength modifier is -2");
#line 27
 testRunner.When("the attacker rolls a 15 against an Armor Class of 14");
#line 28
 testRunner.Then("the attack fails");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Attacks fail when the attack roll is 1 regardless of opponents Armor Class")]
        public virtual void AttacksFailWhenTheAttackRollIs1RegardlessOfOpponentsArmorClass()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Attacks fail when the attack roll is 1 regardless of opponents Armor Class", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
 testRunner.Given("two Characters are ready for combat");
#line 33
 testRunner.When("the attacker rolls a 1 against an Armor Class of 0");
#line 34
 testRunner.Then("the attack fails");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Successful attacks grant the attacker 10 experience points")]
        public virtual void SuccessfulAttacksGrantTheAttacker10ExperiencePoints()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successful attacks grant the attacker 10 experience points", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
 testRunner.Given("two Characters are ready for combat");
#line 39
 testRunner.When("an attack is successful");
#line 40
 testRunner.Then("the attacker earns 10 Experience Points");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Successful attacks cause damage equal to 1 point plus attacker\'s Strength modifie" +
            "r")]
        public virtual void SuccessfulAttacksCauseDamageEqualTo1PointPlusAttackerSStrengthModifier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successful attacks cause damage equal to 1 point plus attacker\'s Strength modifie" +
                    "r", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.Given("two Characters are ready for combat");
#line 45
 testRunner.And("the attacker\'s Strength modifier is 2");
#line 46
 testRunner.When("an attack is successful");
#line 47
 testRunner.Then("the defender takes 3 points of damage");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A negative Strength modifier never reduces damage to less than 1 point")]
        public virtual void ANegativeStrengthModifierNeverReducesDamageToLessThan1Point()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("A negative Strength modifier never reduces damage to less than 1 point", ((string[])(null)));
#line 50
this.ScenarioSetup(scenarioInfo);
#line 51
 testRunner.Given("two Characters are ready for combat");
#line 52
 testRunner.And("the attacker\'s Strength modifier is -2");
#line 53
 testRunner.When("an attack is successful");
#line 54
 testRunner.Then("the defender takes 1 points of damage");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Critical hits do double damage to the defender")]
        public virtual void CriticalHitsDoDoubleDamageToTheDefender()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Critical hits do double damage to the defender", ((string[])(null)));
#line 57
this.ScenarioSetup(scenarioInfo);
#line 58
 testRunner.Given("two Characters are ready for combat");
#line 59
 testRunner.When("the attacker rolls a 20");
#line 60
 testRunner.Then("the defender takes 2 points of damage");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Critical hits double the Strength modifier when calculating damage")]
        public virtual void CriticalHitsDoubleTheStrengthModifierWhenCalculatingDamage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Critical hits double the Strength modifier when calculating damage", ((string[])(null)));
#line 63
this.ScenarioSetup(scenarioInfo);
#line 64
 testRunner.Given("two Characters are ready for combat");
#line 65
 testRunner.And("the attacker\'s Strength modifier is 2");
#line 66
 testRunner.When("the attacker rolls a 20");
#line 67
 testRunner.Then("the defender takes 6 points of damage");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Characters die when their Effective Hit Points are equal to or less than zero")]
        public virtual void CharactersDieWhenTheirEffectiveHitPointsAreEqualToOrLessThanZero()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Characters die when their Effective Hit Points are equal to or less than zero", ((string[])(null)));
#line 70
this.ScenarioSetup(scenarioInfo);
#line 71
 testRunner.Given("two Characters are ready for combat");
#line 72
 testRunner.And("the defender has 1 hit point");
#line 73
 testRunner.When("an attack is successful");
#line 74
 testRunner.Then("the defender dies");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
